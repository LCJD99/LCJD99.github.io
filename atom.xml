<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凌晨九点空间</title>
  
  <subtitle>Dawn at Nine</subtitle>
  <link href="https://lcjd99.github.io/atom.xml" rel="self"/>
  
  <link href="https://lcjd99.github.io/"/>
  <updated>2024-04-04T15:11:14.816Z</updated>
  <id>https://lcjd99.github.io/</id>
  
  <author>
    <name>凌晨九点</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言格式化输出问题</title>
    <link href="https://lcjd99.github.io/others/review-language/c-review/"/>
    <id>https://lcjd99.github.io/others/review-language/c-review/</id>
    <published>2024-04-04T14:51:47.000Z</published>
    <updated>2024-04-04T15:11:14.816Z</updated>
    
    <content type="html"><![CDATA[<p>在日常使用中C语言时，对于命令行工具输出格式化控制非常重要，虽然每天都在用<code>printf</code>但是对其具体的使用还是很容易忘记，于是做如下总结</p><p>在 C 语言中，格式化打印主要通过 <code>printf</code>、<code>sprintf</code>、<code>snprintf</code>、<code>fprintf</code> 等函数实现，它们都使用格式字符串来指定输出数据的类型和格式。格式字符串由普通字符和格式指定符组成，格式指定符用来指定随后参数的打印方式。</p><h3 id="常用的格式指定符："><a href="#常用的格式指定符：" class="headerlink" title="常用的格式指定符："></a>常用的格式指定符：</h3><ul><li><code>%d</code>：输出有符号十进制整数。</li><li><code>%u</code>：输出无符号十进制整数。</li><li><code>%x</code> 或 <code>%X</code>：输出十六进制整数，<code>%x</code> 输出小写字母，<code>%X</code> 输出大写字母。</li><li><code>%o</code>：输出八进制整数。</li><li><code>%f</code>：输出浮点数。</li><li><code>%e</code> 或 <code>%E</code>：输出指数形式的浮点数，<code>%e</code> 使用小写 <code>e</code>，<code>%E</code> 使用大写 <code>E</code>。</li><li><code>%g</code> 或 <code>%G</code>：输出浮点数，自动选择 <code>%f</code> 或 <code>%e</code>&#x2F;%<code>E</code> 的格式，取决于数值的大小。</li><li><code>%c</code>：输出单个字符。</li><li><code>%s</code>：输出字符串。</li><li><code>%p</code>：输出指针的值（十六进制表示）。</li><li><code>%%</code>：输出一个百分号 <code>%</code>。</li></ul><p>除了上述基本的格式指定符，还可以在 <code>%</code> 和格式字符之间插入一些标志、宽度、精度等修饰符：</p><h3 id="标志方式"><a href="#标志方式" class="headerlink" title="标志方式"></a>标志方式</h3><ul><li><code>标志</code>：<ul><li><code>-</code>：左对齐输出。</li><li><code>+</code>：输出数值的正负号。</li><li><code> </code>（空格）：如果第一个字符不是正负号，则在该字符前添加一个空格。</li><li><code>#</code>：对于 <code>%o</code>、<code>%x</code>、<code>%X</code>，添加前缀 <code>0</code>、<code>0x</code>、<code>0X</code>；对于 <code>%f</code>、<code>%e</code>、<code>%E</code>，强制显示小数点；对于 <code>%g</code>、<code>%G</code>，防止尾部零被删除。</li><li><code>0</code>：用零填充空位。</li></ul></li></ul><h3 id="宽度和精度"><a href="#宽度和精度" class="headerlink" title="宽度和精度"></a>宽度和精度</h3><ul><li><p><code>宽度</code>：指定输出字段的最小宽度。如果输出小于这个宽度，会在左边或右边填充空格或零（取决于是否使用了 <code>-</code> 或 <code>0</code> 标志）。</p></li><li><p><code>精度</code>：</p><ul><li>对于 <code>%f</code>、<code>%e</code>、<code>%E</code>，精度表示小数点后的数字位数。</li><li>对于 <code>%g</code>、<code>%G</code>，精度表示有效数字的最大位数。</li><li>对于 <code>%s</code>，精度表示输出字符串的最大长度。</li><li>对于整数类型，精度表示最小数字位数，不足部分会填充零。</li></ul></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="type">char</span> s[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Integer: %d\n&quot;</span>, i);            <span class="comment">// 基本整型输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Integer with width: %10d\n&quot;</span>, i); <span class="comment">// 宽度为10，右对齐</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Integer with width and zero padding: %010d\n&quot;</span>, i); <span class="comment">// 宽度为10，用零填充</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Float: %f\n&quot;</span>, f);              <span class="comment">// 基本浮点数输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Float with precision: %.2f\n&quot;</span>, f); <span class="comment">// 保留两位小数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;String: %s\n&quot;</span>, s);             <span class="comment">// 字符串输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;String with precision: %.5s\n&quot;</span>, s); <span class="comment">// 只输出字符串的前5个字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保格式指定符与提供的参数类型相匹配，否则可能会导致未定义的行为。</li><li>使用 <code>%s</code> 输出字符串时，确保字符串以 null 结尾，否则可能会读取到不确定的数据。</li><li>使用 <code>%</code> 打印百分号时，需要写成 <code>%%</code>。</li><li>注意 <code>printf</code> 家族函数的安全性问题，如缓冲区溢出。建议使用 <code>snprintf</code> 或 <code>fgets/fputs</code> 来避免这类问题。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常使用中C语言时，对于命令行工具输出格式化控制非常重要，虽然每天都在用&lt;code&gt;printf&lt;/code&gt;但是对其具体的使用还是很容易忘记，于是做如下总结&lt;/p&gt;
&lt;p&gt;在 C 语言中，格式化打印主要通过 &lt;code&gt;printf&lt;/code&gt;、&lt;code&gt;sprin</summary>
      
    
    
    
    <category term="others" scheme="https://lcjd99.github.io/categories/others/"/>
    
    
    <category term="C" scheme="https://lcjd99.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【CS61C】Lab2 实验解析</title>
    <link href="https://lcjd99.github.io/CS61C/cs61c/Lab2/"/>
    <id>https://lcjd99.github.io/CS61C/cs61c/Lab2/</id>
    <published>2024-04-04T14:51:47.000Z</published>
    <updated>2024-04-04T15:29:06.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人学习的是 <em>2020 fall</em>版的<a href="https://inst.eecs.berkeley.edu/~cs61c/fa20/">CS61C</a>，本文将对Lab2解题思路做大致介绍，具体代码可以参考<a href="https://github.com/LCJD99/cs61c">我的仓库</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="Exercise-1-Bit-Operations"><a href="#Exercise-1-Bit-Operations" class="headerlink" title="Exercise 1: Bit Operations"></a>Exercise 1: Bit Operations</h4><p>三道位运算的题目中值得一说的是第二道，函数接口如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set the nth bit of the value of x to v.</span></span><br><span class="line"><span class="comment">// Assume 0 &lt;= n &lt;= 31, and v is 0 or 1</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_bit</span><span class="params">(<span class="type">unsigned</span> * x, <span class="type">unsigned</span> n, <span class="type">unsigned</span> v)</span>;</span><br></pre></td></tr></table></figure><p>题目限制如下</p><blockquote><p>You may ONLY use bitwise operations such as and (&amp;), or (|), xor (^), not (~), left shifts («), and right shifts (»). You may not use any for&#x2F;while loops or conditional statements. You also may not use modulo (%), division, addition subtraction, or multiplication for this question.</p></blockquote><p>我的解题思路是:</p><ol><li>首先分析只有当需要变化的位$x_n$和$n$不同时才会发生改变。</li><li>需要通过位运算找到<strong>位反转</strong>的方式和<strong>判断不同</strong>的方式</li><li>位反转：通过<strong>异或</strong>实现</li><li>判断不同： 通过移位到最低位比较得到</li></ol><p>具体代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">set_bit</span><span class="params">(<span class="type">unsigned</span> * x, <span class="type">unsigned</span> n, <span class="type">unsigned</span> v)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> bit = ((*x) &gt;&gt; n) &amp; <span class="number">1</span>;</span><br><span class="line">    (*x) ^= ((bit ^ v) &lt;&lt; n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本人学习的是 &lt;em&gt;2020 fall&lt;/em&gt;版的&lt;a href=&quot;https://inst.eecs.berkeley.edu/~cs</summary>
      
    
    
    
    <category term="CS61C" scheme="https://lcjd99.github.io/categories/CS61C/"/>
    
    
    <category term="C" scheme="https://lcjd99.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>重新学习C语言内存管理</title>
    <link href="https://lcjd99.github.io/CS61C/cs61c/C-and-memory/"/>
    <id>https://lcjd99.github.io/CS61C/cs61c/C-and-memory/</id>
    <published>2024-04-03T14:50:47.000Z</published>
    <updated>2024-04-04T14:58:09.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习完操作系统<strong>MIT6.828</strong>后重新学习C语言的内存管理问题。</p><h2 id="关于标准库-malloc-和-free"><a href="#关于标准库-malloc-和-free" class="headerlink" title="关于标准库 malloc 和 free"></a>关于标准库 malloc 和 free</h2><p>在C标准库中对内存的管理是通过为每个空闲内存提供一个小的数据结构来管理的，大致的伪代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> size;  <span class="comment">//内存块的大小</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">block</span>* <span class="title">next</span>;</span> <span class="comment">//下一个内存块的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说这是一个记录空闲空间的循环链表(自己实现的<em>JOS</em>实际上也是这样管理内存)。</p><h3 id="malloc-的过程"><a href="#malloc-的过程" class="headerlink" title="malloc 的过程"></a>malloc 的过程</h3><p><code>malloc</code> 会根据申请内存的大小，在其中找到一个足够大的块，将这个块移出链表，并将指针返回。如果没有足够大的块，就会像操作系统申请空间，如果仍然无法满足会返回分配失败</p><p>在malloc的过程中还存在多个块满足条件如何选择的问题，此时会涉及到三种策略：</p><ol><li>best-fit ： 分配大小最合适的块</li><li>firtst-fit ：  分配最先找到的满足条件的块</li><li>next-fit ： 在每次遍历过程中记录位置，分配记录位置后下一个满足的块</li></ol><h3 id="free-的过程"><a href="#free-的过程" class="headerlink" title="free 的过程"></a>free 的过程</h3><p><code>free</code> 会将参数中指定的内存块加入到空闲块链表中，同时检查临近(物理空间)的块是否空闲，如果空闲会合并为一个更大的块。</p><h3 id="使用时注意"><a href="#使用时注意" class="headerlink" title="使用时注意"></a>使用时注意</h3><ul><li><code>malloc</code> 二维数组的时候首先分配一维的指针，在循环分配空间，不能分配连续的空间</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在学习完操作系统&lt;strong&gt;MIT6.828&lt;/strong&gt;后重新学习C语言的内存管理问题。&lt;/p&gt;
&lt;h2 id=&quot;关于标准库-ma</summary>
      
    
    
    
    <category term="CS61C" scheme="https://lcjd99.github.io/categories/CS61C/"/>
    
    
    <category term="C" scheme="https://lcjd99.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SEUForum 技术栈</title>
    <link href="https://lcjd99.github.io/Project/SEUForum-Stack/"/>
    <id>https://lcjd99.github.io/Project/SEUForum-Stack/</id>
    <published>2024-04-02T15:52:47.000Z</published>
    <updated>2024-04-03T14:47:34.150Z</updated>
    
    <content type="html"><![CDATA[<p>本项目全栈使用 JavaScript 实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本项目全栈使用 JavaScript 实现&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Project" scheme="https://lcjd99.github.io/categories/Project/"/>
    
    
    <category term="JavaScript" scheme="https://lcjd99.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lcjd99.github.io/test/hello-world/"/>
    <id>https://lcjd99.github.io/test/hello-world/</id>
    <published>2024-04-02T14:40:19.535Z</published>
    <updated>2024-04-02T15:38:52.847Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="test" scheme="https://lcjd99.github.io/categories/test/"/>
    
    
  </entry>
  
</feed>
