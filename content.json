{"meta":{"title":"凌晨九点空间","subtitle":"Dawn at Nine","description":"分享知识、分享经验、分享观点","author":"凌晨九点","url":"https://lcjd99.github.io","root":"/"},"pages":[{"title":"categories","date":"2024-04-02T15:36:31.000Z","updated":"2024-04-02T15:36:31.658Z","comments":true,"path":"categories/index.html","permalink":"https://lcjd99.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-04-02T15:37:45.000Z","updated":"2024-04-02T15:37:45.780Z","comments":true,"path":"tags/index.html","permalink":"https://lcjd99.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"重新学习C语言内存管理","slug":"cs61c/C-and-memory","date":"2024-04-03T14:50:47.000Z","updated":"2024-04-03T15:14:43.699Z","comments":true,"path":"CS61C/cs61c/C-and-memory/","permalink":"https://lcjd99.github.io/CS61C/cs61c/C-and-memory/","excerpt":"","text":"前言在学习完操作系统MIT6.828后重新学习C语言的内存管理问题。 关于标准库 malloc 和 free在C标准库中对内存的管理是通过为每个空闲内存提供一个小的数据结构来管理的，大致的伪代码如下 1234struct block &#123; int size; //内存块的大小 struct block* next; //下一个内存块的指针&#125; 也就是说这是一个记录空闲空间的循环链表(自己实现的JOS实际上也是这样管理内存)。 malloc 的过程malloc 会根据申请内存的大小，在其中找到一个足够大的块，将这个块移出链表，并将指针返回。如果没有足够大的块，就会像操作系统申请空间，如果仍然无法满足会返回分配失败 在malloc的过程中还存在多个块满足条件如何选择的问题，此时会涉及到三种策略： best-fit ： 分配大小最合适的块 firtst-fit ： 分配最先找到的满足条件的块 next-fit ： 在每次遍历过程中记录位置，分配记录位置后下一个满足的块 free 的过程free 会将参数中指定的内存块加入到空闲块链表中，同时检查临近(物理空间)的块是否空闲，如果空闲会合并为一个更大的块。","categories":[{"name":"CS61C","slug":"CS61C","permalink":"https://lcjd99.github.io/categories/CS61C/"}],"tags":[{"name":"C","slug":"C","permalink":"https://lcjd99.github.io/tags/C/"}]},{"title":"SEUForum 技术栈","slug":"SEUForum-Stack","date":"2024-04-02T15:52:47.000Z","updated":"2024-04-02T15:52:47.540Z","comments":true,"path":"Project/SEUForum-Stack/","permalink":"https://lcjd99.github.io/Project/SEUForum-Stack/","excerpt":"","text":"本项目全栈使用 JavaScript 实现","categories":[{"name":"Project","slug":"Project","permalink":"https://lcjd99.github.io/categories/Project/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lcjd99.github.io/tags/JavaScript/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-04-02T14:40:19.535Z","updated":"2024-04-02T15:38:52.847Z","comments":true,"path":"test/hello-world/","permalink":"https://lcjd99.github.io/test/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"https://lcjd99.github.io/categories/test/"}],"tags":[]}],"categories":[{"name":"CS61C","slug":"CS61C","permalink":"https://lcjd99.github.io/categories/CS61C/"},{"name":"Project","slug":"Project","permalink":"https://lcjd99.github.io/categories/Project/"},{"name":"test","slug":"test","permalink":"https://lcjd99.github.io/categories/test/"}],"tags":[{"name":"C","slug":"C","permalink":"https://lcjd99.github.io/tags/C/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://lcjd99.github.io/tags/JavaScript/"}]}